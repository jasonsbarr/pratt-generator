import { tokenize } from "./src/lexer.js";
import { createParser } from "./src/parser.js";

const operators = [
  {
    id: "NumberLiteral",
    nToken: "NUMBER",
    lToken: null,
    oToken: null,
    prec: 0,
    assoc: "NONE",
    affix: "NONE",
    arity: "NONE",
  },
  {
    id: "Plus",
    nToken: null,
    lToken: "PLUS",
    oToken: null,
    prec: 30,
    assoc: "LEFT",
    affix: "INFIX",
    arity: "BINARY",
  },
  {
    id: "Mul",
    nToken: null,
    lToken: "MUL",
    oToken: null,
    prec: 40,
    assoc: "LEFT",
    affix: "INFIX",
    arity: "BINARY",
  },
  {
    id: "UMinus",
    nToken: "MINUS",
    lToken: null,
    oToken: null,
    prec: 45,
    assoc: "RIGHT",
    affix: "PREFIX",
    arity: "UNARY",
  },
  {
    id: "Parentheses",
    nToken: "LPAREN",
    lToken: null,
    oToken: "RPAREN",
    prec: 100,
    assoc: "NONE",
    affix: "MATCHFIX",
    arity: "UNARY",
  },
];

const symbols = [
  {
    id: "NumberLiteral",
    type: "Literal",
    name: "NUMBER",
    prec: 0,
    den: "NUD",
    assoc: "NONE",
    arity: "NULL",
  },
  {
    id: "PLUS",
    type: "Symbol",
    name: "PLUS",
    prec: 30,
    den: "LED",
    assoc: "LEFT",
    arity: "BINARY",
  },
  {
    id: "UPLUS",
    type: "Symbol",
    name: "PLUS",
    prec: 45,
    den: "NUD",
    assoc: "RIGHT",
    arity: "UNARY",
  },
  {
    id: "MINUS",
    type: "Symbol",
    name: "MINUS",
    prec: 30,
    den: "LED",
    assoc: "LEFT",
    arity: "BINARY",
  },
  {
    id: "UMINUS",
    type: "Symbol",
    name: "MINUS",
    prec: 45,
    den: "NUD",
    assoc: "RIGHT",
    arity: "UNARY",
  },
  {
    id: "MUL",
    type: "Symbol",
    name: "MUL",
    prec: 35,
    den: "LED",
    assoc: "LEFT",
    arity: "BINARY",
  },
  {
    id: "DIV",
    type: "Symbol",
    name: "DIV",
    prec: 35,
    den: "LED",
    assoc: "LEFT",
    arity: "BINARY",
  },
  {
    id: "EXP",
    type: "Symbol",
    name: "EXP",
    prec: 40,
    den: "LED",
    assoc: "RIGHT",
    arity: "BINARY",
  },
  {
    id: "LPAREN",
    type: "Punc",
    name: "LPAREN",
    prec: 100,
    den: "NUD",
    assoc: "NONE",
    arity: "UNARY",
  },
  {
    id: "RPAREN",
    type: "Punc",
    name: "RPAREN",
    prec: 0,
    den: "ODE",
    assoc: "NONE",
    arity: "NONE",
  },
];

const parser = createParser(operators);

export const parse = (input) => parser(tokenize(input));
